---
description: "Follow this rule when writing or editing Markdown documents to ensure consistent formatting and structure"
globs: "**/*.md"
alwaysApply: false
---

# Markdown Formatting Standards

## Context

- Ensures consistent formatting and structure in Markdown documents.
- Helps maintain readability and professional appearance.
- Applies to all Markdown document creation and editing.
- Enables better documentation and knowledge sharing.
- Creates consistent experience across different Markdown renderers.
- A well-formatted document is the first impression of your repository.
- Good documentation encourages adoption and collaboration.
- Following best practices improves discoverability and usability.
- Visual elements enhance engagement and comprehension.

## Critical rules

- Follow Markdown best practices for formatting.
- Maintain clear document structure with proper heading hierarchy.
- Use Mermaid UML diagrams for documenting complex sequences or architecture.
- Maximum heading depth: 4 levels (h1-h4).
- Indent content within XML tags by 2 spaces.
- Code blocks must indicate the language properly after the initial 3 backticks.
- Keep tables properly aligned with consistent spacing.
- Use blank lines between different content blocks for readability.
- Use proper list formatting: unordered lists with `-` and ordered lists with numbers.
- Use descriptive link text rather than raw URLs.
- Include alt text for images.
- Keep line length under 120 characters for better readability.
- Use fenced code blocks with language specifiers instead of indented code blocks.
- End all sentences with a period to maintain proper grammar and readability.
- Use proper heading capitalization (title case for h1-h2, sentence case for h3-h4).
- Add a space after list markers (- or numbers) for consistent rendering.
- Use consistent emphasis formatting (either \* or \_ for italics/bold, not mixed).
- Use concise, scannable paragraphs with 3-5 sentences maximum.
- Incorporate visual elements strategically:
  - Screenshots of the application in use
  - Diagrams explaining architecture or workflows
  - Logo at the top when available
- Add relevant badges at the top (build status, version, license, etc.) for README files.
- Provide working examples that demonstrate real-world usage.
- Maintain a friendly, encouraging tone throughout.
- Close with clear next steps or call-to-action.
- Keep the entire document scannable within 2-3 minutes.
- Include requirements and dependencies section in README files.
- Add a troubleshooting or FAQ section for common issues when applicable.
- Provide links to additional documentation when available.

## Essential README Sections

For README.md files, include these essential sections:
- Project title and description
- Installation instructions
- Usage examples
- Features list
- Contributing guidelines
- License information

## Examples

<example type="valid">
# Document Title

[![Build Status](https://img.shields.io/travis/username/repo.svg)](https://travis-ci.org/username/repo)
[![Version](https://img.shields.io/npm/v/project.svg)](https://www.npmjs.com/package/project)
[![License](https://img.shields.io/badge/License-MIT-blue.svg)](LICENSE)

## Section Heading

### Sub-section

#### Lowest level heading

This paragraph explains the purpose of the document and provides context.

- List item one
- List item two
- List item three

1. First step
2. Second step
3. Third step

<details>
  <summary>Expandable section</summary>
  
  Content indented by 2 spaces within XML tags.
</details>

```javascript
// Properly language-tagged code block
function example() {
  return true;
}
```

| Column 1 | Column 2 | Column 3 |
| -------- | -------- | -------- |
| Data     | Data     | Data     |
| More     | More     | More     |

[Descriptive link text](https://example.com) instead of raw URLs.

![Alt text for image](path/to/image.png)

```mermaid
sequenceDiagram
  participant A as User
  participant B as System
  A->>B: Request data
  B->>A: Return response
```

## Features

- **Fast Processing**: Handles large datasets efficiently
- **Easy Integration**: Works with existing toolchains
- **Flexible Configuration**: Customize to your specific needs

## Documentation

For detailed documentation, see [docs/README.md](docs/README.md).

## Contributing

Contributions welcome! Please check out our [contributing guidelines](CONTRIBUTING.md).

## License

MIT Â© [Your Name]
</example>

<example type="invalid">
# Document Title
##### Too Deep Heading (5 levels)

<details>
<summary>No indentation in XML tags</summary>
This content should be indented.
</details>

```
// Missing language tag after backticks
function example() {
  return true;
}
```

| Column 1 | Column 2 | Column 3 |
| -------- | -------- | -------- |
| Data     | Data     | Data     |

https://raw-url-instead-of-descriptive-link.com

![](path/to/image.png)

```
sequenceDiagram
  participant A as User
  participant B as System
  A->>B: Request data
  B->>A: Return response
```

# My Project

This is a project I made. It does stuff.

To install:
Download and run the file.

Usage:
Just use it like any other tool.

You might have problems if you don't set it up right.

I might add more features later.

If you want to contribute just send me code.

License: free
</example>