---
description: "Follow this rule when listing directories on either Unix/Linux/macOS or Windows systems"
globs:
alwaysApply: false
---

# Directory Listing Guidelines

## Context

- This rule provides guidance on how to list directory contents on different operating systems.
- Apply when user asks for directory listing or file exploration.
- Use when navigating the filesystem.
- Always consider excluding common large/noisy directories like .git, node_modules, etc.
- The approach differs between Unix-like systems (Linux, macOS) and Windows systems.

## Unix/Linux/macOS Systems

- Unix systems typically use bash, zsh, or other POSIX-compliant shells.
- macOS has BSD variants of some commands with slightly different options.

### Critical rules for Unix-like systems

- Use `ls` for basic directory listing.
- Use `ls -l` for detailed listing with permissions, sizes, and dates.
- Use `ls -la` to include hidden files (those starting with .).
- Use `ls -lh` for human-readable file sizes (KB, MB, GB).
- Use `ls -lt` to sort by modification time (newest first).
- Use `ls -lS` to sort by file size (largest first).
- Use `find . -type f -name "*.txt"` to search for files by pattern.
- Use `find . -type d -name "*src*"` to search for directories by pattern.
- Use `find . -type f -exec ls -lh {} \;` to get detailed listing of found files.
- Use `du -sh *` to show disk usage of directories in human-readable format.
- Use `du -sh */ | sort -hr` to show directories sorted by size (largest first).
- For tree-like view, use the `tree` command if available or install it.
- For finding files by content, use `grep -r "search-term" .`.
- For file counting, use `find . -type f | wc -l`.
- For macOS/BSD systems, remember options may differ slightly from GNU versions.
- Use the more modern `fd` command instead of `find` when available for better performance and simpler syntax.
- For searching file content with pattern context, use `grep -r "search-term" . -A 2 -B 2` to show 2 lines before and after.
- For large directories, use `ls -la | head -20` to limit output to first 20 entries.
- Consider using `exa` or `lsd` as modern replacements for `ls` when available.

## Windows Systems (PowerShell)

- Windows systems should use PowerShell (pwsh) for optimal directory listing.
- PowerShell Core (pwsh) is cross-platform but these commands are optimized for Windows.

### Critical rules for Windows systems

- Use `Get-ChildItem` (alias `dir` or `ls`) for basic directory listing.
- Use `Get-ChildItem | Format-Table` for detailed table view.
- Use `Get-ChildItem -Force` to include hidden files.
- Use `Get-ChildItem -Recurse` for recursive directory listing.
- Use `Get-ChildItem -Path C:\path\to\dir -Filter *.txt` to filter by file type.
- Use `Get-ChildItem -Path . -Include *.txt -Recurse` for recursive searches with filtering.
- For large directories, limit output with `Get-ChildItem | Select-Object -First 20`.
- For finding files by content, use `Select-String -Path ".\*.txt" -Pattern "search-term"`.
- For disk usage information, use `Get-ChildItem | Measure-Object -Property Length -Sum`.
- For a tree-like view, use `tree /f` (Command Prompt) or create a PowerShell function.
- Always prefix absolute paths with the drive letter (e.g., `C:\path\to\directory`).
- For recent PowerShell versions, prefer parameter names over positional parameters.
- Use proper error handling with `-ErrorAction` for commands that might fail.
- Use `Sort-Object` with property names for better control over sorting results.
- For modern PowerShell, consider using `Get-ChildItem | Sort-Object LastWriteTime -Descending` to sort by modification date.
- Use named parameters rather than positional when the command has multiple options.

## Common exclusions for all systems

- For recursive commands, exclude common large or noisy directories:
  - Version control: `.git`, `.svn`, `.hg`.
  - Package managers: `node_modules`, `vendor`, `bower_components`, `packages`.
  - Build directories: `dist`, `build`, `target`, `out`.
  - Caches: `.cache`, `__pycache__`, `.next`, `.nuxt`.
  - Virtual environments: `venv`, `.venv`, `env`, `.env`.
  - Dependencies: `deps`, `third_party`, `jspm_packages`.
  - IDE/editor folders: `.idea`, `.vscode`, `.vs`.
  - Binary files: `*.exe`, `*.dll`, `*.o`, `*.obj`, `bin`, `obj`.

## Exclusion examples for Unix-like systems

- Basic grep exclusion: `grep -r "search-term" --exclude-dir={.git,node_modules,dist} .`
- Find with exclusion: `find . -type f -not -path "*/node_modules/*" -not -path "*/.git/*"`
- Complex find exclusion: `find . -type f -not \( -path "*/node_modules/*" -o -path "*/.git/*" -o -path "*/dist/*" \)`
- Directory size with exclusion: `du -sh */ | grep -v "node_modules\|.git"`
- Modern find exclude with -prune: `find . -type f -not -path "*/\.*" -path "./node_modules" -prune -o -print`
- Using fd with exclusions: `fd -t f -E node_modules -E .git "\.js$"`

## Exclusion examples for Windows PowerShell

- Basic exclusion: `Get-ChildItem -Recurse | Where-Object { $_.FullName -notmatch "node_modules|\.git" }`
- Using -Exclude parameter: `Get-ChildItem -Recurse -Exclude "node_modules", ".git", "dist"`
- For content search: `Select-String -Path ".\*" -Pattern "searchterm" -Exclude "*.dll", "*.exe" | Where-Object { $_.Path -notmatch "node_modules|\.git" }`
- For specific directory types: `Get-ChildItem -Directory | Where-Object { $_.Name -notin @("node_modules", ".git", "dist") }`
- Optimized filtering with Where-Object: `Get-ChildItem -Directory | Where-Object { $_.Name -notmatch "^(node_modules|\.git|dist)$" }`
- Advanced filtering with regular expressions: `Get-ChildItem -Recurse | Where-Object { $_.FullName -notmatch "\\(node_modules|\.git|dist)\\" }`

## Examples for Unix-like systems

<example type="valid">
# Basic directory listing
ls

# Show all files including hidden ones with details

ls -la

# Human-readable file sizes

ls -lh

# Sort files by modification time (newest first)

ls -lt

# Sort files by size (largest first)

ls -lS

# Find all JavaScript files, excluding node_modules and .git

find . -name "_.js" -not -path "_/node*modules/*" -not -path "\_/.git/\*"

# Using fd (if available) for better performance

fd -t f -E node_modules -E .git "\.js$"

# Count all Python files in the project

find . -name "_.py" -not -path "_/venv/\*" | wc -l

# Search for a string in all text files

grep -r "function" --include="\*.js" --exclude-dir={node_modules,.git,dist} .

# Get directory sizes sorted by largest first, excluding node_modules

du -sh \*/ | grep -v "node_modules" | sort -hr

# Find files modified in the last 24 hours

find . -type f -mtime -1 -not -path "_/node_modules/_"

# Count lines of code in all JavaScript files

find . -name "_.js" -not -path "_/node_modules/\*" | xargs wc -l

# Search with context (2 lines before and after matches)

grep -r "function" --include="\*.js" -A 2 -B 2 .

# Using modern ls alternatives if available

exa -la --git
</example>

## Examples for Windows PowerShell

<example type="valid">
# Basic directory listing
Get-ChildItem
# Or using aliases
dir
ls

# Show hidden files

Get-ChildItem -Force

# Recursive search for all .txt files, excluding node_modules and .git

Get-ChildItem -Path . -Include \*.txt -Recurse | Where-Object { $\_.FullName -notmatch "node_modules|\.git" }

# Get disk usage for current directory excluding large directories

Get-ChildItem -Directory | Where-Object { $_.Name -notin @("node_modules", ".git") } | ForEach-Object { $_.Name + " " + "{0:N2} MB" -f ((Get-ChildItem $\_ -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB) }

# Find files containing specific text

Select-String -Path "./\*.cs" -Pattern "TODO" | Format-Table FileName, LineNumber, Line -AutoSize

# List only directories, sorted by last modified time

Get-ChildItem -Directory | Sort-Object LastWriteTime -Descending

# Use proper formatting for better readability

Get-ChildItem | Format-Table Name, Length, LastWriteTime -AutoSize

# Limit results for large directories

Get-ChildItem | Select-Object -First 20

# Count files by extension

Get-ChildItem -File -Recurse | Group-Object Extension | Sort-Object Count -Descending

# Get total size of current directory in MB

"{0:N2} MB" -f ((Get-ChildItem -Recurse | Measure-Object -Property Length -Sum).Sum / 1MB)
</example>

## Invalid Examples

<example type="invalid">
# Incorrect: Using Windows commands on Unix
dir /s
Get-ChildItem

# Incorrect: Using Unix commands on Windows

ls -la
grep -r "pattern" .
find . -name "\*.txt"

# Inefficient: Including large directories that should be excluded

find . -name "\*.js" # Missing exclusions for node_modules, .git, etc.
Get-ChildItem -Recurse # Missing exclusions for node_modules, .git, etc.

# Incorrect: Using Windows backslashes in Unix paths

find . -name "_.txt" -not -path "_\node_modules\*"

# Error-prone: Not escaping spaces or special characters in paths

find . -name my file.txt
Get-ChildItem C:\User Files\Documents

# Incorrect: Using PowerShell parameters with Unix commands

ls --Force
ls -Recurse

# Incorrect: Missing drive letter in Windows absolute paths

Get-ChildItem \Users\username\Documents
</example>