---
description: PHPUnit testing best practices for PHP applications
globs: "**/*Test.php"
alwaysApply: false
parent_file: php.mdc
---

# PHPUnit Testing Rules

## Test Structure Requirements

```php
// Always extend TestCase
class ProductServiceTest extends TestCase 
{
    // Use typed properties
    private ProductService $subject;
    private MockObject $repository;
    
    // Always use return type void for setUp/tearDown
    protected function setUp(): void 
    {
        // Create mocks using createMock()
        $this->repository = $this->createMock(RepositoryInterface::class);
        $this->subject = new ProductService($this->repository);
    }
    
    // Test methods: prefix with test or use @test annotation
    // Use descriptive method names
    /** @test */
    public function getProductReturnsCorrectDataForValidId(): void 
    {
        // Always follow Arrange-Act-Assert pattern
        
        // Arrange
        $id = 'valid-id';
        $expected = ['id' => 'valid-id', 'name' => 'Product'];
        
        $this->repository->method('findById')
            ->with($id)
            ->willReturn($expected);
        
        // Act
        $result = $this->subject->getProduct($id);
        
        // Assert - use specific assertions
        $this->assertSame($expected, $result);
    }
}
```

## Refactoring Guidelines

When refactoring tests, use this incremental approach:

1. Create a refactoring plan before starting
2. Break changes into logical steps:
   ```
   Step 1: Extract hardcoded strings to constants
   Step 2: Create required mocks
   Step 3: Fix assertion methods
   Step 4: Implement proper exception testing
   ```
3. Complete one step at a time before moving to the next

## Mock Objects

```php
// Good - explicit mock creation and configuration
$repository = $this->createMock(RepositoryInterface::class);
$repository->method('findById')
    ->with('valid-id')
    ->willReturn(['id' => 'valid-id', 'name' => 'Product']);

// Bad - unclear expectations
$repository = $this->createMock(Repository::class);
$repository->expects($this->any())
    ->method('findById')
    ->willReturn($data);
```

## Data Providers

```php
/** @test */
/** @dataProvider provideProductData */
public function calculateTotalPriceReturnsCorrectValue(
    array $product, 
    int $quantity, 
    float $expectedTotal
): void {
    $this->assertSame(
        $expectedTotal, 
        $this->calculator->calculateTotal($product, $quantity)
    );
}

public function provideProductData(): array
{
    return [
        'single item' => [
            ['price' => 10.00], 
            1, 
            10.00
        ],
        'multiple items' => [
            ['price' => 10.00], 
            3, 
            30.00
        ],
    ];
}
```

## Assertions

```php
// Use specific assertions
$this->assertSame($expected, $actual); // Instead of assertEquals
$this->assertCount(3, $items);         // Instead of assertEquals(3, count($items))
$this->assertArrayHasKey('id', $data); // Instead of isset($data['id'])

// Testing exceptions
$this->expectException(NotFoundException::class);
$this->expectExceptionMessage('Product not found');
$this->subject->getProduct('invalid-id');
```

## Dead Code Detection

```php
// Signs of dead code to identify and remove:
// 1. Unused variables
$value = $this->calculateValue(); // Never used

// 2. Unreachable code
return $result;
$this->doSomething(); // Never executed

// 3. Unused private methods
private function formatData($data) 
{
    // This method is never called
}

// 4. Redundant assertions
$this->assertTrue(true);
$this->assertEquals(1, 1);
```

## Examples

<example type="valid">
<?php

use PHPUnit\Framework\TestCase;
use App\Service\ProductService;
use App\Repository\ProductRepositoryInterface;
use App\Exception\ProductNotFoundException;

class ProductServiceTest extends TestCase
{
    private ProductService $subject;
    private ProductRepositoryInterface $repository;
    
    protected function setUp(): void
    {
        $this->repository = $this->createMock(ProductRepositoryInterface::class);
        $this->subject = new ProductService($this->repository);
    }
    
    /** @test */
    public function getProductReturnsDataForValidId(): void
    {
        // Arrange
        $id = 'valid-id';
        $productData = ['id' => 'valid-id', 'name' => 'Test Product'];
        
        $this->repository->method('findById')
            ->with($id)
            ->willReturn($productData);
            
        // Act
        $result = $this->subject->getProduct($id);
        
        // Assert
        $this->assertSame($productData, $result);
        $this->assertArrayHasKey('name', $result);
    }
    
    /** @test */
    public function getProductThrowsExceptionForInvalidId(): void
    {
        // Arrange
        $id = 'invalid-id';
        
        $this->repository->method('findById')
            ->with($id)
            ->willReturn(null);
            
        // Assert expectation
        $this->expectException(ProductNotFoundException::class);
        
        // Act
        $this->subject->getProduct($id);
    }
    
    /** @test */
    /** @dataProvider productDataProvider */
    public function calculatePriceReturnsCorrectTotal(
        array $product,
        int $quantity,
        float $expectedTotal
    ): void {
        // Act
        $result = $this->subject->calculatePrice($product, $quantity);
        
        // Assert
        $this->assertSame($expectedTotal, $result);
    }
    
    public function productDataProvider(): array
    {
        return [
            'single product' => [
                ['price' => 10.00], 
                1, 
                10.00
            ],
            'multiple quantity' => [
                ['price' => 10.00], 
                3, 
                30.00
            ],
        ];
    }
}
</example>

<example type="invalid">
<?php
class ProductTest extends PHPUnit_Framework_TestCase
{
    private $service;
    private $repo;
    
    public function setUp() 
    {
        $this->repo = new ProductRepository();
        $this->service = new ProductService($this->repo);
    }
    
    public function productGetWorking()
    {
        $product = $this->service->getProduct("123");
        $this->assertTrue(is_array($product));
        $this->assertTrue(isset($product["name"]));
        $this->assertEquals(123, $product["id"]);
        $this->assertEquals("Test", $product["name"]);
    }
    
    public function testException()
    {
        try {
            $this->service->getProduct("invalid");
            $this->fail("Should have thrown exception");
        } catch (Exception $e) {
            $this->assertTrue(true);
        }
    }
}
</example>